$date
	Tue May 25 11:49:38 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module BancoPruebas $end
$var wire 1 ! valid_out_out3 $end
$var wire 1 " valid_out_out2 $end
$var wire 1 # valid_out_out1 $end
$var wire 1 $ valid_out_out0 $end
$var wire 1 % valid_out1 $end
$var wire 1 & valid_out0 $end
$var wire 1 ' valid $end
$var wire 8 ( data_out_out3 [7:0] $end
$var wire 8 ) data_out_out2 [7:0] $end
$var wire 8 * data_out_out1 [7:0] $end
$var wire 8 + data_out_out0 [7:0] $end
$var wire 8 , data_out1 [7:0] $end
$var wire 8 - data_out0 [7:0] $end
$var wire 8 . data_in [7:0] $end
$var wire 1 / cclk $end
$var wire 1 0 bclk $end
$var wire 1 1 aclk $end
$scope module demuxL1 $end
$var wire 1 % valid1 $end
$var wire 1 & valid0 $end
$var wire 8 2 data_in1 [7:0] $end
$var wire 8 3 data_in0 [7:0] $end
$var wire 1 0 bclk $end
$var wire 1 1 aclk $end
$var reg 8 4 data_ant0 [7:0] $end
$var reg 8 5 data_ant1 [7:0] $end
$var reg 8 6 data_out0 [7:0] $end
$var reg 8 7 data_out1 [7:0] $end
$var reg 8 8 data_out2 [7:0] $end
$var reg 8 9 data_out3 [7:0] $end
$var reg 1 : valid_ant0 $end
$var reg 1 ; valid_ant1 $end
$var reg 1 $ valid_out0 $end
$var reg 1 # valid_out1 $end
$var reg 1 " valid_out2 $end
$var reg 1 ! valid_out3 $end
$upscope $end
$scope module demuxL2 $end
$var wire 1 ' valid $end
$var wire 8 < data_in [7:0] $end
$var wire 1 / cclk $end
$var wire 1 0 bclk $end
$var reg 8 = data_ant [7:0] $end
$var reg 8 > data_out0 [7:0] $end
$var reg 8 ? data_out1 [7:0] $end
$var reg 1 @ valid_ant $end
$var reg 1 & valid_out0 $end
$var reg 1 % valid_out1 $end
$upscope $end
$scope module probador $end
$var reg 1 1 aclk $end
$var reg 1 0 bclk $end
$var reg 1 / cclk $end
$var reg 8 A data_in [7:0] $end
$var reg 1 ' valid $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 A
x@
bx ?
bx >
bx =
b0 <
x;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
01
00
0/
b0 .
bx -
bx ,
bx +
bx *
bx )
bx (
0'
x&
x%
x$
x#
x"
x!
$end
#5
0@
b0 =
1/
#10
0&
b0 -
b0 3
b0 >
0%
b0 ,
b0 2
b0 ?
0/
10
#15
b11111111 .
b11111111 <
b11111111 A
1'
1/
#20
b0 +
b0 6
0#
b0 *
b0 7
b0 )
b0 8
0!
b0 (
b0 9
0/
00
11
#25
b11011101 .
b11011101 <
b11011101 A
1@
b11111111 =
1/
#30
1;
b11011101 5
1:
b11111111 4
1&
b11111111 -
b11111111 3
b11111111 >
1%
b11011101 ,
b11011101 2
b11011101 ?
0/
10
#35
b11011101 =
b11101110 .
b11101110 <
b11101110 A
1/
#40
0/
00
01
#45
b11001100 .
b11001100 <
b11001100 A
b11101110 =
1/
#50
b11101110 -
b11101110 3
b11101110 >
b11001100 ,
b11001100 2
b11001100 ?
0/
10
#55
b11001100 =
b10111011 .
b10111011 <
b10111011 A
1/
#60
1"
b11011101 )
b11011101 8
1!
b11001100 (
b11001100 9
1$
b11111111 +
b11111111 6
1#
b11101110 *
b11101110 7
0/
00
11
#65
b10011001 .
b10011001 <
b10011001 A
b10111011 =
1/
#70
b10011001 5
b10111011 4
b10111011 -
b10111011 3
b10111011 >
b10011001 ,
b10011001 2
b10011001 ?
0/
10
#75
b10011001 =
b10101010 .
b10101010 <
b10101010 A
1/
#80
0/
00
01
#85
b10001000 .
b10001000 <
b10001000 A
b10101010 =
1/
#90
b10101010 -
b10101010 3
b10101010 >
b10001000 ,
b10001000 2
b10001000 ?
0/
10
#95
b10001000 =
0'
1/
#100
b10111011 +
b10111011 6
b10101010 *
b10101010 7
b10011001 )
b10011001 8
b10001000 (
b10001000 9
0/
00
11
#105
0@
b1110111 .
b1110111 <
b1110111 A
1'
1/
#110
b1110111 5
0:
b0 4
0&
b0 -
b0 3
b0 >
b1110111 ,
b1110111 2
b1110111 ?
0/
10
#115
0'
b0 .
b0 <
b0 A
1@
b1110111 =
1/
#120
0/
00
01
#125
0@
b0 =
1/
#130
0%
b0 ,
b0 2
b0 ?
0/
10
#135
1/
#140
b1110111 )
b1110111 8
0!
b0 (
b0 9
0$
b0 +
b0 6
0#
b0 *
b0 7
0/
00
11
#145
1/
#150
0;
b0 5
0/
10
#155
1/
#160
0/
00
01
#165
1/
#170
0/
10
#175
1/
#180
0"
b0 )
b0 8
0/
00
11
#185
1/
