/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* top =  1  *)
(* src = "main_muxes.v:4" *)
module main_muxes_estructural(aclk, bclk, cclk, valid0, valid1, valid2, valid3, data_in0, data_in1, data_in2, data_in3, data_out_l2, data_out0, data_out1, valid_out_l2, valid_out0, valid_out1);
  (* src = "main_muxes.v:5" *)
  input aclk;
  (* src = "main_muxes.v:5" *)
  input bclk;
  (* src = "main_muxes.v:5" *)
  input cclk;
  (* src = "main_muxes.v:6" *)
  input [7:0] data_in0;
  (* src = "main_muxes.v:6" *)
  input [7:0] data_in1;
  (* src = "main_muxes.v:6" *)
  input [7:0] data_in2;
  (* src = "main_muxes.v:6" *)
  input [7:0] data_in3;
  (* src = "main_muxes.v:7" *)
  output [7:0] data_out0;
  (* src = "main_muxes.v:7" *)
  output [7:0] data_out1;
  (* src = "main_muxes.v:7" *)
  output [7:0] data_out_l2;
  (* src = "main_muxes.v:5" *)
  input valid0;
  (* src = "main_muxes.v:5" *)
  input valid1;
  (* src = "main_muxes.v:5" *)
  input valid2;
  (* src = "main_muxes.v:5" *)
  input valid3;
  (* src = "main_muxes.v:8" *)
  output valid_out0;
  (* src = "main_muxes.v:8" *)
  output valid_out1;
  (* src = "main_muxes.v:8" *)
  output valid_out_l2;
  (* src = "main_muxes.v:13" *)
  muxL_estructural muxL_estructural1_1 (
    .aclk(aclk),
    .bclk(bclk),
    .data_in0(data_in0),
    .data_in1(data_in1),
    .data_out0(data_out0),
    .valid0(valid0),
    .valid1(valid1),
    .valid_out0(valid_out0)
  );
  (* src = "main_muxes.v:35" *)
  muxL_estructural muxL_estructural1_2 (
    .aclk(bclk),
    .bclk(cclk),
    .data_in0(data_out0),
    .data_in1(data_out1),
    .data_out0(data_out_l2),
    .valid0(valid_out0),
    .valid1(valid_out1),
    .valid_out0(valid_out_l2)
  );
  (* src = "main_muxes.v:24" *)
  muxL_estructural muxL_estructural2 (
    .aclk(aclk),
    .bclk(bclk),
    .data_in0(data_in2),
    .data_in1(data_in3),
    .data_out0(data_out1),
    .valid0(valid2),
    .valid1(valid3),
    .valid_out0(valid_out1)
  );
endmodule

(* src = "muxL_estructural2.v:1" *)
module muxL_estructural(aclk, bclk, valid0, valid1, data_in0, data_in1, valid_out0, data_out0);
  (* src = "muxL_estructural2.v:15" *)
  wire [7:0] _00_;
  (* src = "muxL_estructural2.v:15" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  (* src = "muxL_estructural2.v:2" *)
  input aclk;
  (* src = "muxL_estructural2.v:3" *)
  input bclk;
  (* src = "muxL_estructural2.v:6" *)
  input [7:0] data_in0;
  (* src = "muxL_estructural2.v:7" *)
  input [7:0] data_in1;
  (* src = "muxL_estructural2.v:9" *)
  output [7:0] data_out0;
  (* src = "muxL_estructural2.v:4" *)
  input valid0;
  (* src = "muxL_estructural2.v:5" *)
  input valid1;
  (* src = "muxL_estructural2.v:8" *)
  output valid_out0;
  NOT _25_ (
    .A(aclk),
    .Y(_02_)
  );
  NAND _26_ (
    .A(_02_),
    .B(valid1),
    .Y(_03_)
  );
  NAND _27_ (
    .A(aclk),
    .B(valid0),
    .Y(_04_)
  );
  NAND _28_ (
    .A(_04_),
    .B(_03_),
    .Y(_01_)
  );
  NOT _29_ (
    .A(valid1),
    .Y(_05_)
  );
  NOR _30_ (
    .A(aclk),
    .B(_05_),
    .Y(_06_)
  );
  NAND _31_ (
    .A(_06_),
    .B(data_in1[0]),
    .Y(_07_)
  );
  NOT _32_ (
    .A(valid0),
    .Y(_08_)
  );
  NOR _33_ (
    .A(_02_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _34_ (
    .A(_09_),
    .B(data_in0[0]),
    .Y(_10_)
  );
  NAND _35_ (
    .A(_10_),
    .B(_07_),
    .Y(_00_[0])
  );
  NAND _36_ (
    .A(_06_),
    .B(data_in1[1]),
    .Y(_11_)
  );
  NAND _37_ (
    .A(_09_),
    .B(data_in0[1]),
    .Y(_12_)
  );
  NAND _38_ (
    .A(_12_),
    .B(_11_),
    .Y(_00_[1])
  );
  NAND _39_ (
    .A(_06_),
    .B(data_in1[2]),
    .Y(_13_)
  );
  NAND _40_ (
    .A(_09_),
    .B(data_in0[2]),
    .Y(_14_)
  );
  NAND _41_ (
    .A(_14_),
    .B(_13_),
    .Y(_00_[2])
  );
  NAND _42_ (
    .A(_06_),
    .B(data_in1[3]),
    .Y(_15_)
  );
  NAND _43_ (
    .A(_09_),
    .B(data_in0[3]),
    .Y(_16_)
  );
  NAND _44_ (
    .A(_16_),
    .B(_15_),
    .Y(_00_[3])
  );
  NAND _45_ (
    .A(_06_),
    .B(data_in1[4]),
    .Y(_17_)
  );
  NAND _46_ (
    .A(_09_),
    .B(data_in0[4]),
    .Y(_18_)
  );
  NAND _47_ (
    .A(_18_),
    .B(_17_),
    .Y(_00_[4])
  );
  NAND _48_ (
    .A(_06_),
    .B(data_in1[5]),
    .Y(_19_)
  );
  NAND _49_ (
    .A(_09_),
    .B(data_in0[5]),
    .Y(_20_)
  );
  NAND _50_ (
    .A(_20_),
    .B(_19_),
    .Y(_00_[5])
  );
  NAND _51_ (
    .A(_06_),
    .B(data_in1[6]),
    .Y(_21_)
  );
  NAND _52_ (
    .A(_09_),
    .B(data_in0[6]),
    .Y(_22_)
  );
  NAND _53_ (
    .A(_22_),
    .B(_21_),
    .Y(_00_[6])
  );
  NAND _54_ (
    .A(_06_),
    .B(data_in1[7]),
    .Y(_23_)
  );
  NAND _55_ (
    .A(_09_),
    .B(data_in0[7]),
    .Y(_24_)
  );
  NAND _56_ (
    .A(_24_),
    .B(_23_),
    .Y(_00_[7])
  );
  DFF _57_ (
    .C(bclk),
    .D(_01_),
    .Q(valid_out0)
  );
  DFF _58_ (
    .C(bclk),
    .D(_00_[0]),
    .Q(data_out0[0])
  );
  DFF _59_ (
    .C(bclk),
    .D(_00_[1]),
    .Q(data_out0[1])
  );
  DFF _60_ (
    .C(bclk),
    .D(_00_[2]),
    .Q(data_out0[2])
  );
  DFF _61_ (
    .C(bclk),
    .D(_00_[3]),
    .Q(data_out0[3])
  );
  DFF _62_ (
    .C(bclk),
    .D(_00_[4]),
    .Q(data_out0[4])
  );
  DFF _63_ (
    .C(bclk),
    .D(_00_[5]),
    .Q(data_out0[5])
  );
  DFF _64_ (
    .C(bclk),
    .D(_00_[6]),
    .Q(data_out0[6])
  );
  DFF _65_ (
    .C(bclk),
    .D(_00_[7]),
    .Q(data_out0[7])
  );
endmodule
