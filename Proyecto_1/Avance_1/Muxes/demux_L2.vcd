$date
	Tue May 25 14:35:35 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module BancoPruebas $end
$var wire 1 ! valid_out_l2 $end
$var wire 1 " valid_out1 $end
$var wire 1 # valid_out0 $end
$var wire 1 $ valid3 $end
$var wire 1 % valid2 $end
$var wire 1 & valid1 $end
$var wire 1 ' valid0 $end
$var wire 8 ( data_out_l2 [7:0] $end
$var wire 8 ) data_out1 [7:0] $end
$var wire 8 * data_out0 [7:0] $end
$var wire 8 + data_in3 [7:0] $end
$var wire 8 , data_in2 [7:0] $end
$var wire 8 - data_in1 [7:0] $end
$var wire 8 . data_in0 [7:0] $end
$var wire 1 / cclk $end
$var wire 1 0 bclk $end
$var wire 1 1 aclk $end
$scope module muxL1_1 $end
$var wire 1 & valid1 $end
$var wire 1 ' valid0 $end
$var wire 8 2 data_in1 [7:0] $end
$var wire 8 3 data_in0 [7:0] $end
$var wire 1 0 bclk $end
$var wire 1 1 aclk $end
$var reg 8 4 data_out0 [7:0] $end
$var reg 1 # valid_out0 $end
$upscope $end
$scope module muxL1_2 $end
$var wire 8 5 data_in0 [7:0] $end
$var wire 1 # valid0 $end
$var wire 1 " valid1 $end
$var wire 8 6 data_in1 [7:0] $end
$var wire 1 / bclk $end
$var wire 1 0 aclk $end
$var reg 8 7 data_out0 [7:0] $end
$var reg 1 ! valid_out0 $end
$upscope $end
$scope module muxL2 $end
$var wire 1 $ valid1 $end
$var wire 1 % valid0 $end
$var wire 8 8 data_in1 [7:0] $end
$var wire 8 9 data_in0 [7:0] $end
$var wire 1 0 bclk $end
$var wire 1 1 aclk $end
$var reg 8 : data_out0 [7:0] $end
$var reg 1 " valid_out0 $end
$upscope $end
$scope module probador $end
$var reg 1 1 aclk $end
$var reg 1 0 bclk $end
$var reg 1 / cclk $end
$var reg 8 ; data_in0 [7:0] $end
$var reg 8 < data_in1 [7:0] $end
$var reg 8 = data_in2 [7:0] $end
$var reg 8 > data_in3 [7:0] $end
$var reg 1 ' valid0 $end
$var reg 1 & valid1 $end
$var reg 1 % valid2 $end
$var reg 1 $ valid3 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 >
b0 =
b0 <
b0 ;
bx :
b0 9
b0 8
bx 7
bx 6
bx 5
bx 4
b0 3
b0 2
01
00
0/
b0 .
b0 -
b0 ,
b0 +
bx *
bx )
bx (
0'
0&
0%
0$
x#
x"
x!
$end
#5
b0 (
b0 7
1/
#10
0#
b0 *
b0 4
b0 5
0"
b0 )
b0 6
b0 :
0/
10
#15
0!
1/
#20
b11001100 +
b11001100 8
b11001100 >
b11011101 ,
b11011101 9
b11011101 =
b11101110 -
b11101110 2
b11101110 <
b11111111 .
b11111111 3
b11111111 ;
1$
1%
1&
1'
0/
00
11
#25
1/
#30
1"
b11011101 )
b11011101 6
b11011101 :
1#
b11111111 *
b11111111 4
b11111111 5
0/
10
#35
1!
b11111111 (
b11111111 7
1/
#40
0/
00
01
#45
b11011101 (
b11011101 7
1/
#50
b11101110 *
b11101110 4
b11101110 5
b11001100 )
b11001100 6
b11001100 :
0/
10
#55
b11101110 (
b11101110 7
1/
#60
b10001000 +
b10001000 8
b10001000 >
b10011001 ,
b10011001 9
b10011001 =
b10101010 -
b10101010 2
b10101010 <
b10111011 .
b10111011 3
b10111011 ;
0/
00
11
#65
b11001100 (
b11001100 7
1/
#70
b10011001 )
b10011001 6
b10011001 :
b10111011 *
b10111011 4
b10111011 5
0/
10
#75
b10111011 (
b10111011 7
1/
#80
0/
00
01
#85
b10011001 (
b10011001 7
1/
#90
b10101010 *
b10101010 4
b10101010 5
b10001000 )
b10001000 6
b10001000 :
0/
10
#95
b10101010 (
b10101010 7
1/
#100
b0 +
b0 8
b0 >
b1110111 ,
b1110111 9
b1110111 =
b0 -
b0 2
b0 <
b0 .
b0 3
b0 ;
0$
0&
0'
0/
00
11
#105
b10001000 (
b10001000 7
1/
#110
b1110111 )
b1110111 6
b1110111 :
0#
b0 *
b0 4
b0 5
0/
10
#115
0!
b0 (
b0 7
1/
#120
0/
00
01
#125
1!
b1110111 (
b1110111 7
1/
#130
0"
b0 )
b0 6
b0 :
0/
10
#135
0!
b0 (
b0 7
1/
#140
0%
b0 ,
b0 9
b0 =
0/
00
11
#145
1/
#150
0/
10
#155
1/
#160
0/
00
01
#165
1/
#170
0/
10
#175
1/
#180
0/
00
11
